{"version":3,"sources":["webpack:///src/app/application/ticket-reschedule-popup/ticket-reschedule-popup.component.ts","webpack:///src/app/application/ticket-reschedule-popup/ticket-reschedule-popup.component.html"],"names":["TicketReschedulePopupComponent","dialogRef","service","toastr","router","genicProfile","loginservice","engineerservice","notifyService","refresh","savechanges","currentUTCDate","Date","oldScheduleDate","oldScheduleTime","meridian","localdate","UTC","getFullYear","getMonth","getDate","minDate","year","Number","month","day","maxDate","oldTicketTeam","disabledDates","isDisabled","date","current","find","x","from","equals","isDisabledCss","currentUser","subscribe","IsEditable","radioData","loader","ShowEngineerList","spinnerShow","formData","OneOffAppointmentDate","OneOffStartTime","getTicketById","Token","Id","res","response","Message","result","TicketTeams","LastAppointmentDateStart","AppointmentStart","LastAppointmentDateEnd","AppointmentEnd","warning","MessageDescription","error","console","log","getEngineerListSync","Engineerlist","refrestTicketTeamlist","BindEngineerList","disabledSelectDate","setTimeout","Type","CreateForAllDate","Status","TicketTeamList","sTime","eTime","getUTCHours","toString","padStart","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","OneOffEndTime","AssignedEngineerForAllTickets","then","status","success","Ticket","SendReScheduleTicketEmailNotification","RescheduledTicket","s","close","TicketId","ReScheduleTicketEmailNotification","resp","index","checked","engineerid","engineername","undefined","navigate","push","EngineerId","EngineerName","EngineerLogo","splice","Reallocate","Rescheduled","split","stime","replace","etime","releseTemporaryEngineerFromTicket","refrestUnallocatedTimeEngineerList","DisabledDateList","obj","forEach","element","Iscalendarshow","demoClasses","document","querySelectorAll","el","id","innerHTML","next","provide","useClass","onSubmit","selector","templateUrl","styles","providers"],"mappings":"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","file":"default~application-calendar-calendar-module~application-ticket-reschedule-popup-ticket-reschedule-p~a3e4bb1e-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { NgbTimeAdapter, NgbDateAdapter, NgbDateStruct, NgbDate } from '@ng-bootstrap/ng-bootstrap';\nimport { TicketService } from 'src/app/services/ticket.service';\nimport { NgbDateToStringAdapter } from 'src/app/ngb-date-to-string-adapter';\nimport { NgbTimeToStringAdapter } from 'src/app/ngb-time-to-string-adapter';\nimport { ToastrService } from 'ngx-toastr';\nimport { EngineerService } from 'src/app/services/engineer.service';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { Login, AuthenticationService } from 'src/app/services';\nimport { NotificationService } from 'src/app/services/notification.service';\nimport { GenicProfileService } from 'src/app/services/genicprofile.service';\nimport { Engineer } from 'src/app/services/engineer.module';\n\n@Component({\n  selector: 'app-ticket-reschedule-popup',\n  templateUrl: './ticket-reschedule-popup.component.html',\n  styles: [`.custom-day { text-align: center; padding: 0.185rem 0.25rem; border-radius: 0.25rem; display: inline-block; width: 2rem; }\n  .custom-day:hover, .custom-day.focused { background-color: #e6e6e6; color: #fff; }\n  .isHoliday { background-color: #eae6e6 !important;color: red !important; cursor: alias; }\n  .hidden { display: none; }\n  .isDisabledDate {color: #eae7e7;}`],\n  providers: [\n    { provide: NgbDateAdapter, useClass: NgbDateToStringAdapter },\n    { provide: NgbTimeAdapter, useClass: NgbTimeToStringAdapter }],\n})\nexport class TicketReschedulePopupComponent implements OnInit {\n  refresh: Subject<any> = new Subject();\n  savechanges = false;\n  currentUTCDate = new Date();\n  // Notification Param\n  oldScheduleDate: any = Date();\n  oldScheduleTime: any = '';\n  // Notification Param\n  meridian = true;\n  localdate = new Date(Date.UTC(this.currentUTCDate.getFullYear(),\n                  this.currentUTCDate.getMonth(),\n                  this.currentUTCDate.getDate(), 0, 0, 0));\n  minDate = {\n              year: Number(this.currentUTCDate.getFullYear()),\n              month: Number(this.currentUTCDate.getMonth() + 1),\n              day: Number(this.currentUTCDate.getDate())\n            };\n  maxDate = {\n              year: Number(this.currentUTCDate.getFullYear()) + 2,\n              month: Number(this.currentUTCDate.getMonth() + 1),\n              day: Number(this.currentUTCDate.getDate())\n            };\n  currentUser: Login;\n  ShowEngineerList: boolean;\n  spinnerShow: boolean;\n  oldTicketTeam: any = [];\n  public radioData: any;\n  LastAppointmentDateStart: string;\n  LastAppointmentDateEnd: string;\n  loader: boolean;\n  Iscalendarshow: boolean;\n  date: {year: number, month: number};\n  disabledDates: NgbDateStruct[] = [];\n  isDisabled = (date: NgbDateStruct, current: {month: number, year: number}) => {\n    return this.disabledDates.find(x => NgbDate.from(x).equals(date)) ? true : false;\n  }\n  isDisabledCss = (date: NgbDate) => {\n    return this.disabledDates.find(x => NgbDate.from(x).equals(date)) ? true : false;\n  }\n  IsEditable: boolean;\n  constructor(\n    public dialogRef: MatDialogRef<TicketReschedulePopupComponent>,\n    public service: TicketService,\n    private toastr: ToastrService,\n    private router: Router,\n    public genicProfile: GenicProfileService,\n    public loginservice: AuthenticationService,\n    public engineerservice: EngineerService,\n    public notifyService: NotificationService\n  ) {\n    this.loginservice.currentUser.subscribe(x => this.currentUser = x);\n    this.IsEditable = true;\n   }\n\n  ngOnInit() {\n      this.radioData = 'O';\n      this.loader = false;\n      this.ShowEngineerList = false;\n      this.spinnerShow = false;\n      // Notification Param\n      this.oldScheduleDate = this.service.formData.OneOffAppointmentDate;\n      this.oldScheduleTime = this.service.formData.OneOffStartTime;\n      // Notification Param\n      this.service.getTicketById(this.currentUser.Token, this.service.formData.Id).subscribe( res => {\n        if (res) { const response = res as any;\n                   if (response.Message === 'success') {\n                      this.service.formData = response.result;\n                      this.oldTicketTeam = this.service.formData.TicketTeams;\n                   this.LastAppointmentDateStart = this.service.formData.AppointmentStart;\n                   this.LastAppointmentDateEnd = this.service.formData.AppointmentEnd;\n                    }\n                   if (response.Message === 'failure') {\n                      this.toastr.warning('warning', response.MessageDescription);\n                    }\n      }}, error =>  console.log(error));\n      this.engineerservice.getEngineerListSync(this.currentUser.Token).subscribe( res => {\n          if (res) { const response = res as any;\n                     this.engineerservice.Engineerlist = response.result as Engineer[];\n          }}, error =>  console.log(error));\n      this.refrestTicketTeamlist();\n      this.BindEngineerList();\n\n      // Disabled Dates\n      this.disabledSelectDate();\n      setTimeout(() => {\n        if (this.currentUser.Type === 'Engineer') {\n        if (this.engineerservice.formData.CreateForAllDate === 'SameDate') {\n          this.maxDate = {\n           year: Number(this.currentUTCDate.getFullYear()),\n           month: Number(this.currentUTCDate.getMonth() + 1),\n           day: Number(this.currentUTCDate.getDate())\n         };\n        }}\n      }, 500);\n      setTimeout(() => {\n        switch(this.service.formData.Status){\n          case 'UPCOMING':\n          case 'OVERDUE':\n          case 'HOLD':\n          this.IsEditable = true;\n          break;\n          default: this.IsEditable = false; break;\n        }\n      }, 1000);\n  }\n  refrestTicketTeamlist() {\n    this.service.refrestTicketTeamlist(this.service.formData.Id, this.currentUser.Token).subscribe( res => {\n      if (res) { const response = res as any;\n                 if (response.Message === 'success') {\n                    this.service.TicketTeamList = response.result;\n                  }\n    }}, error =>  console.log(error));\n  }\n  onSubmit() {\n    this.spinnerShow = true;\n    if (this.service.formData.AppointmentStart !== null && this.service.formData.AppointmentEnd !== null) {\n      if (new Date(this.service.formData.AppointmentStart) > new Date(this.service.formData.AppointmentEnd)) {\n        this.toastr.warning('warning', 'Start Time is lessthen end time');\n        this.spinnerShow = false;\n        return false;\n      }\n    }\n    this.service.formData.OneOffAppointmentDate = this.service.formData.AppointmentStart;\n    const sTime = new Date(this.service.formData.AppointmentStart);\n    const eTime = new Date(this.service.formData.AppointmentEnd);\n    this.service.formData.OneOffStartTime =\n                              sTime.getUTCHours().toString().padStart(2, '0') + ':' +\n                              sTime.getUTCMinutes().toString().padStart(2, '0') + ':' +\n                              sTime.getUTCSeconds().toString().padStart(2, '0') + '.' +\n                              sTime.getUTCMilliseconds().toString().padStart(3, '0');\n    this.service.formData.OneOffEndTime =\n                              eTime.getUTCHours().toString().padStart(2, '0') + ':' +\n                              eTime.getUTCMinutes().toString().padStart(2, '0') + ':' +\n                              eTime.getUTCSeconds().toString().padStart(2, '0') + '.' +\n                              eTime.getUTCMilliseconds().toString().padStart(3, '0');\n    if (this.radioData === 'R') {\n      this.service.AssignedEngineerForAllTickets(this.currentUser.Token).then(\n            res => {\n              if (res.status === 202) {\n                this.toastr.success('Selected Engineers is assigned to all ' + this.currentUser.Ticket + 's');\n                this.SendReScheduleTicketEmailNotification(this.service.formData.Id);\n              }\n            }\n          );\n    } else {\n      this.service.RescheduledTicket(this.currentUser.Token).subscribe( res => {\n        if (res) { const response = res as any;\n                   if (response.Message === 'success') {\n                    this.SendReScheduleTicketEmailNotification(this.service.formData.Id);\n                    }\n                   if (response.Message === 'failure') {\n                      this.toastr.warning('warning', response.MessageDescription);\n                    }\n      }}, error =>  console.log(error));\n    }\n\n    setTimeout(() => {\n      let s = this.savechanges;\n      this.dialogRef.close({ s });\n      this.spinnerShow = false;\n      this.toastr.success('Update successfully');\n      }, 1000);\n  }\n\n  // Send ReSchedule notification\n  SendReScheduleTicketEmailNotification(TicketId) {\n    this.notifyService.ReScheduleTicketEmailNotification(this.oldTicketTeam, TicketId, this.currentUser.Id, this.oldScheduleDate, this.oldScheduleTime)\n    .subscribe( resp => {\n    }, error =>  console.log(error));\n  }\n\n  public AddEngineersToTicket(index: number, checked: boolean, engineerid: string, engineername: string) {\n    if (this.service.formData.TicketId === undefined || this.service.formData.TicketId === '') {\n      this.router.navigate(['/tickets/ticket-create']);\n      return false;\n    }\n    if (checked) {\n      this.service.formData.TicketTeams.push({\n        Id: 0,\n        TicketId: this.service.formData.Id,\n        EngineerId: engineerid,\n        EngineerName: engineername,\n        EngineerLogo: null\n      });\n    } else {\n      this.service.formData.TicketTeams.splice(index, 1);\n      this.engineerservice.Engineerlist.push({\n        Id: engineerid,\n        EngineerName: engineername\n      });\n    }\n    this.service.formData.Reallocate = true;\n    this.BindEngineerList();\n  }\n  onAppointmentDateTimeSelect() {\n    this.ShowEngineerList = false;\n    this.service.formData.Rescheduled = true;\n    this.service.formData.AppointmentEnd = this.service.formData.AppointmentStart;\n    this.service.formData.AppointmentStart = this.service.formData.AppointmentStart.split('T')[0] + 'T10:00:00Z';\n    this.service.formData.AppointmentEnd = this.service.formData.AppointmentStart.split('T')[0] + 'T11:00:00Z';\n  }\n  onAppointmentTimeSelect() {\n    this.ShowEngineerList = false;\n    this.service.formData.Rescheduled = true;\n  }\n  OnGetAvailableEngineers() {\n    this.loader = true;\n    if (new Date(this.service.formData.AppointmentStart) >= new Date(this.service.formData.AppointmentEnd)) {\n      this.toastr.warning('warning', 'Start Time is lessthen end time');\n      this.loader = false;\n      return false;\n    }\n    if (this.service.formData.AppointmentStart === undefined || this.service.formData.AppointmentStart === null ||\n    this.service.formData.AppointmentEnd === undefined || this.service.formData.AppointmentEnd === null) {\n      this.toastr.warning('Warning', 'Please select appointment date & time!');\n      this.loader = false;\n      return false;\n     }\n    this.ShowEngineerList = true;\n    let stime = this.service.formData.AppointmentStart.replace('-', '').replace('-', '');\n    stime = stime.replace(':', '').replace(':', '').replace('T', '').replace('Z', '');\n    let etime = this.service.formData.AppointmentEnd.replace('-', '').replace('-', '');\n    etime = etime.replace(':', '').replace(':', '').replace('T', '').replace('Z', '');\n    this.engineerservice.releseTemporaryEngineerFromTicket(this.service.formData.Id, this.currentUser.Token, 'relese').subscribe( res => {\n      this.engineerservice.refrestUnallocatedTimeEngineerList(stime, etime, this.currentUser.Token);\n      this.loader = false;\n    }, error =>  console.log(error));\n    this.service.formData.TicketTeams = [];\n  }\n  disabledSelectDate() {\n    this.genicProfile.DisabledDateList(this.currentUser.Token).subscribe( res => {\n      if (res) {\n       let obj: any;\n       obj = res;\n       obj.forEach(element => {\n         this.disabledDates.push({year: element.year, month: element.month, day: element.day});\n       });\n       this.isDisabled = (date: NgbDateStruct, current: {month: number, year: number}) => {\n          return this.disabledDates.find(x => NgbDate.from(x).equals(date)) ? true : false;\n        };\n      }\n    }, error =>  console.log(error));\n  }\n  showcalendar() {\n    if (this.Iscalendarshow) {\n      this.Iscalendarshow = false;\n    } else {\n      this.Iscalendarshow = true;\n    }\n  }\n  private BindEngineerList() {\n    setTimeout(() => {\n      let demoClasses = null;\n      demoClasses = document.querySelectorAll('.engineer-list-class');\n      demoClasses.forEach(element => {\n        this.service.formData.TicketTeams.forEach(el => {\n          if (element.id === el.EngineerId) {\n            element.innerHTML = '';\n          }\n        });\n      });\n      this.refresh.next();\n     }, 100);\n  }\n  close() {\n    this.dialogRef.close();\n  }\n}\n","<style>\n  .tableBodyScroll tbody {\n    display: block;\n    max-height: 200px;\n    overflow-y: scroll;\n  }\n  \n  .tableBodyScroll thead,\n  tbody tr {\n    display: table;\n    width: 100%;\n    table-layout: fixed;\n  }\n  </style>\n<h5 class=\"dispaly-4\">Reschedule & Reallocate\n<button class=\"btn btn-outline-danger pull-right\" mat-dialog-close (click)=\"close()\">X</button>\n</h5>\n<h5 class=\"dispaly-4\">\n  {{this.currentUser.Ticket}} # {{service.formData.TicketId}}\n  <span *ngIf=\"service.formData.TicketType === 'One-Off Ticket'\"> (One-Off {{this.currentUser.Ticket}})</span>\n  <span *ngIf=\"service.formData.TicketType === 'Recurring Ticket'\"> (Recurring {{this.currentUser.Ticket}})</span>\n</h5>\n<h5 class=\"dispaly-4\">{{ LastAppointmentDateStart | date: 'EEEE, MMMM d, y':'+0000' }}\n{{ LastAppointmentDateStart | date: 'HH:mm' + ' to ':'+0000' }}\n{{ LastAppointmentDateEnd | date: 'HH:mm':'+0000' }}\n\n</h5>\n<h5>\n  {{service.formData.CustomerCompanyName}}\n</h5>\n<h6>\n  {{service.formData.CustomerAddress}}\n</h6>\n<hr>\n<form #form=\"ngForm\" autocomplete=\"off\" (submit)=\"onSubmit()\">\n<div class=\"form-row\">\n  <div class=\"form-group col-md-12\">\n    <div class=\"col-md-12\" *ngIf=\"this.IsEditable\">\n      <div class=\"form-group row\">\n        <div class=\"col-md-4\">\n          <label>Appointment Date<span\n              class=\"text-danger\">*</span></label>\n              <div class=\"btooltip\"> <i class=\"fa fa-question-circle text-info\" style=\"cursor: help;\" ></i>\n                <span class=\"btooltiptext\">Red Highlighted date is National Holiday, to make it Working Day please go to Settings - Business Hours - Holiday - Enable Working</span>\n              </div>\n              <div class=\"input-group\">\n                <ng-template #customDay let-date let-currentMonth=\"currentMonth\" let-selected=\"selected\" let-disabled=\"disabled\" let-focused=\"focused\">\n                  <span class=\"custom-day\" [class.focused]=\"focused\"\n                        [class.bg-primary]=\"selected\" \n                        [class.hidden]=\"date.month !== currentMonth\" \n                        [class.isDisabledDate]=\"disabled\"\n                        [class.isHoliday]=\"isDisabledCss(date)\">\n                    {{ date.day }}\n                  </span>\n                </ng-template>\n                  <ngb-datepicker\n                      [minDate]=\"minDate\"\n                      [maxDate]=\"maxDate\"\n                      name=\"AppointmentStart\"\n                      [markDisabled]=\"isDisabled\"\n                      [dayTemplate]=\"customDay\"\n                      #AppointmentStart=\"ngModel\"\n                      (select)=\"onAppointmentDateTimeSelect()\"\n                      [(ngModel)]=\"service.formData.AppointmentStart\"\n                      (navigate)=\"date=$event.next\">\n                  </ngb-datepicker>\n              </div>\n        </div>\n        <div class=\"col-md-8\">\n          <div class=\"form-group row\">             \n            <div class=\"col-md-6 padd-right-0\">\n                <label>Start Time</label>\n                <div class=\"input-group\">\n                    <div class=\"input-group\">\n                        <ngb-timepicker (click)=\"onAppointmentTimeSelect()\" [meridian]=\"meridian\"\n                            name=\"AppointmentStart\" [readonlyInputs]=\"true\" \n                            [(ngModel)]=\"service.formData.AppointmentStart\">\n                        </ngb-timepicker>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6 padd-left-0\">\n                <label>End Time</label>\n                <div class=\"input-group\">\n                    <ngb-timepicker (click)=\"onAppointmentTimeSelect()\" [meridian]=\"meridian\"\n                        name=\"AppointmentEnd\" [readonlyInputs]=\"true\" \n                        [(ngModel)]=\"service.formData.AppointmentEnd\">\n                    </ngb-timepicker>\n                </div>\n            </div>\n\n            <div class=\"col-md-12 text-center\">\n              <br>\n              <strong>\n                  {{ service.formData.AppointmentStart | date: 'EEEE, MMMM d, y':'+0000' }}</strong>\n              <br>\n              <strong>\n                  {{ service.formData.AppointmentStart | date: 'HH:mm' + ' to ':'+0000' }}</strong>\n              <strong>\n                  {{ service.formData.AppointmentEnd | date: 'HH:mm':'+0000' }}</strong>\n              <br>\n          </div>\n            <div *ngIf=\"!loader\" class=\"col-md-12\">\n              <a  href=\"javascript:;\" class=\"btn btn-primary btn-block\" (click)=\"OnGetAvailableEngineers()\" >\n                Get available {{this.currentUser.Engineer}}s\n              </a>\n          </div>\n          <div *ngIf=\"loader\" class=\"col-md-12\">\n            <div class=\"progress\" style=\"height: 40px;\">\n              <div class=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>\n            </div>\n          </div>\n        </div>\n        </div>\n      </div>\n      <div class=\"row\" style=\"display: none;\">\n        <div class=\"col-md-6\">\n          <div class=\"padd-top-10\">\n            <label class=\"kt-checkbox kt-checkbox--solid kt-checkbox--brand\">\n              <input type=\"checkbox\"  name=\"Rescheduled\"\n              #Rescheduled=\"ngModel\"\n              [(ngModel)]=\"service.formData.Rescheduled\" >\n              Mark as Rescheduled\n              <span></span>\n            </label>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"padd-top-10\">\n          <label class=\"kt-checkbox kt-checkbox--solid kt-checkbox--brand\">\n            <input type=\"checkbox\"  name=\"Reallocate\"\n            #Reallocate=\"ngModel\"\n            [(ngModel)]=\"service.formData.Reallocate\" >\n            Mark as Reallocated\n            <span></span>\n          </label>\n        </div>\n        </div>\n      </div>\n      <div class=\"row\">\n          <div *ngIf=\"ShowEngineerList\" class=\"col-md-12\">\n              <table class=\"table table-striped properies-table-info ng-star-inserted table-bordered table-hover table-checkable tableBodyScroll ng-star-inserted\"\n                  *ngIf=\"engineerservice.Engineerlist.length > 0\" >\n                  <thead>\n                    <tr>\n                      <th colspan=\"2\">\n                        Available {{this.currentUser.Engineer}}s List\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                      <tr *ngFor=\"let x of  engineerservice.Engineerlist; let i=index; async\" class=\"engineer-list-class\" id=\"{{x.Id}}\">\n                          <td width=\"10%\"> \n                                <a\n                                (click)=\"AddEngineersToTicket(i, true, x.Id, x.EngineerName)\" href=\"javascript:;\"><i class=\"fa fa-plus text-success\"></i> </a>\n                          </td>\n                          <td width=\"90%\">{{x.EngineerName}}\n                            <span class=\"kt-badge kt-badge--success kt-badge--inline kt-badge--pill\"\n                            *ngIf=\"x.Type === 1\">Supervisor</span>\n                            <span class=\"kt-badge kt-badge--warning kt-badge--inline kt-badge--pill\"\n                            *ngIf=\"x.Type === 2\">Foreman</span>\n                          </td>\n                      </tr>\n                  </tbody>\n              </table>\n              <div *ngIf=\"engineerservice.Engineerlist.length === 0\" class=\"alert alert-warning\">\n                {{this.currentUser.Engineer}} not available at this time. </div>\n          </div>\n          <div class=\"col-md-12\">\n                  <table\n                      class=\"table table-striped properies-table-info ng-star-inserted table-bordered table-hover table-checkable tableBodyScroll ng-star-inserted\"\n                       >\n                      <thead>\n                        <tr>\n                          <th>\n                            Assigned {{this.currentUser.Engineer}}s List\n                          </th>\n                          <th style=\"text-align: right;\">\n                            <a href=\"javascript:;\" class=\"btn btn-secondary calendar\" title=\"Assigned {{this.currentUser.Engineer}}s List\" (click)=\"showcalendar()\">\n                              <i class=\"fa fa-users\"></i> \n                              <div *ngIf=\"Iscalendarshow\" style=\"position: absolute; z-index: 99999; background-color: white;right: 0px;\">\n                                  <table class=\"table table-striped properies-table-info\" style=\"width: 210px;\">\n                                    <tbody>\n                                      <tr *ngFor=\"let x of oldTicketTeam; let i=index; async\">\n                                        <td>{{x.EngineerName}} \n                                        </td>\n                                      </tr>\n                                    </tbody>\n                                  </table>\n                              </div>\n                          </a>\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                          <tr *ngFor=\"let x of service.formData?.TicketTeams; let i=index; async\">\n                              <td width=\"10%\"><a (click)=\"AddEngineersToTicket(i, false, x.EngineerId, x.EngineerName)\" href=\"javascript:;\"><i class=\"fa fa-minus text-danger\"></i> </a></td>\n                              <td width=\"90%\">{{x.EngineerName}} \n                              </td>\n                          </tr>\n                      </tbody>\n                  </table>\n                  <div *ngIf=\"service.formData?.TicketTeams.length === 0\" class=\"alert alert-warning\">\n                    {{this.currentUser.Engineer}}s not assigned yet!</div>\n              </div>\n              <div *ngIf=\"service.formData.TicketType === 'Recurring Ticket'\" class=\"col-md-12\">\n                  <div class=\"row\" *ngIf=\"currentUser.Type !== 'Engineer'\">\n                    <div class=\"container\">\n                      <div class=\"kt-radio-list text-color-red\">\n                        <label\n                            class=\"kt-radio kt-radio--bold kt-radio--brand\">\n                            <input type=\"radio\" class=\"custom-control-input\" value=\"O\" [(ngModel)]=\"radioData\" name=\"radioData\">\n                                update only {{service.formData.TicketId}} {{this.currentUser.Ticket}} \n                            <span></span>\n                        </label>\n                         <label\n                            class=\"kt-radio kt-radio--bold kt-radio--brand\">\n                            <input type=\"radio\" class=\"custom-control-input\" value=\"R\" [(ngModel)]=\"radioData\" name=\"radioData\">\n                                update all upcoming {{this.currentUser.Ticket}} link to  {{service.formData.TicketId}} {{this.currentUser.Ticket}} \n                            <span></span>\n                        </label>  \n                    </div>\n                </div>\n                  </div>\n              </div>\n            </div>\n            <div class=\"row\">\n                  <div class=\"col-md-12  text-right\">\n                    <button type=\"submit\" class=\"btn btn-primary\">Save changes <i *ngIf=\"spinnerShow\" class=\"la la-spinner fa-spin\" ></i> </button>\n                </div>\n            </div>\n    </div>\n    <div class=\"col-md-12\" *ngIf=\"!this.IsEditable\">\n      <div class=\"alert alert-warning\">\n        {{this.currentUser.Ticket}} Can't reschedule when {{this.currentUser.Ticket}} Status is {{this.service.formData.Status}} \n      </div>\n    </div>\n  </div>\n</div>\n</form>"]}