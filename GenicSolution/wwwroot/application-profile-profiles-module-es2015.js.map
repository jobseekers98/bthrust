{"version":3,"sources":["./src/app/application/profile/profiles.module.ts","./src/app/application/profile/password-change.component.ts","./src/app/application/profile/password-change.component.html","./node_modules/ngx-select2/__ivy_ngcc__/fesm2015/ngx-select2.js"],"names":[],"mappings":"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","file":"application-profile-profiles-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'; \r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DataTablesModule } from 'angular-datatables';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { LSelect2Module } from 'ngx-select2';\r\nimport { NgMultiSelectDropDownModule } from 'ng-multiselect-dropdown';\r\nimport { PasswordChangeComponent } from './password-change.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatPasswordStrengthModule } from '@angular-material-extensions/password-strength';\r\nconst routes: Routes = [\r\n  { path: '',\tcomponent: PasswordChangeComponent},\r\n  { path: 'password-change', component: PasswordChangeComponent},\r\n];\r\n@NgModule({\r\n  declarations: [PasswordChangeComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatDatepickerModule,\r\n    MatFormFieldModule,\r\n    MatNativeDateModule,\r\n    MatInputModule,\r\n    HttpClientModule,\r\n    DataTablesModule,\r\n    FormsModule,\r\n    NgbModule,\r\n    LSelect2Module,\r\n    MatPasswordStrengthModule,\r\n    MatSlideToggleModule,\r\n    MatToolbarModule,\r\n    MatTabsModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(routes),\r\n    NgMultiSelectDropDownModule\r\n  ],\r\n  exports: [\r\n    MatDatepickerModule,\r\n    MatFormFieldModule,\r\n    MatNativeDateModule,\r\n    MatInputModule\r\n  ],\r\n})\r\nexport class ProfilesModule { }\r\n","import { Component, OnInit } from '@angular/core';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Login, AuthenticationService } from 'src/app/services';\nimport { environment } from 'src/environments/environment';\nimport { ToastrService } from 'ngx-toastr';\nimport { GenicProfileService } from 'src/app/services/genicprofile.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-password-change',\n  templateUrl: './password-change.component.html',\n  styles: []\n})\nexport class PasswordChangeComponent implements OnInit {\n  currentUser: Login;\n  localPrependUrl: string;\n  showDetails: boolean;\n  isValidChangePassword = true;\n  isValidOldChangePassword = true;\n  isValidNewChangePassword = true;\n  isValidConfirmChangePassword = true;\n  showDetails3: boolean;\n  constructor(\n    public service: LoginService,\n    public loginservice: AuthenticationService,\n    private toastr: ToastrService,\n    public genicprofileservice: GenicProfileService) {\n    this.loginservice.currentUser.subscribe(x => this.currentUser = x);\n    this.localPrependUrl = environment.apiUrl;\n   }\n\n  ngOnInit() {\n  }\n  onsubmitPasswordchange() {\n    this.genicprofileservice.TicketFilter.IsReady = false;\n    this.genicprofileservice.TicketFilter.IsReadyQuote = false;\n    this.genicprofileservice.TicketFilter.IsReadyInvoice = false;\n    this.isValidChangePassword = true;\n    this.isValidOldChangePassword = true;\n    this.isValidNewChangePassword = true;\n    this.isValidConfirmChangePassword = true;\n    this.service.forgetpassword.UserName = this.currentUser.UserName;\n    if (this.service.forgetpassword.OldPassword === '') {\n      this.isValidChangePassword = false;\n      this.isValidOldChangePassword = false;\n      this.toastr.warning('warning', 'Please enter old password');\n      return false;\n    }\n    if (this.service.forgetpassword.NewPassword === '') {\n      this.isValidChangePassword = false;\n      this.isValidNewChangePassword = false;\n      this.toastr.warning('warning', 'Please enter new password');\n      return false;\n    }\n    if (this.service.forgetpassword.ConfirmPassword === '') {\n      this.isValidChangePassword = false;\n      this.isValidConfirmChangePassword = false;\n      this.toastr.warning('warning', 'Please enter verify password');\n      return false;\n    }\n    if (this.service.forgetpassword.ConfirmPassword.length < 6) {\n      this.isValidChangePassword = false;\n      this.isValidConfirmChangePassword = false;\n      this.toastr.warning('warning', 'Minimum 6-to-16 characters Password length Required');\n      return false;\n    }\n    if (this.service.forgetpassword.NewPassword !== this.service.forgetpassword.ConfirmPassword) {\n      this.isValidChangePassword = false;\n      this.isValidNewChangePassword = false;\n      this.isValidConfirmChangePassword = false;\n      this.toastr.warning('warning', 'Both password not match');\n      return false;\n    }\n    // this.service.putPasswordChange(this.currentUser.Token).subscribe(\n    //   res => {\n    //     if (res.status === 202) {\n    //       this.toastr.success('success', 'update successfully');\n    //       this.service.forgetpassword.OldPassword = '';\n    //       this.service.forgetpassword.NewPassword = '';\n    //       this.service.forgetpassword.ConfirmPassword = '';\n    //       Swal.fire({\n    //         title: 'Your password update successfully!',\n    //         text: 'Use new password when you login next time.',\n    //         type: 'info'\n    //       });\n    //     } else {\n    //       const r: any = res;\n    //       this.toastr.warning('warning', r.body.toString());\n    //     }\n    //   },\n    //   err => {\n    //     const r: any = err;\n    //     this.toastr.error('error', r.body.toString());\n    //     console.log(err.error);\n    //   });\n    this.service.putPasswordChange(this.currentUser.Token).subscribe( res => {\n      if (res) { const response = res as any;\n                if (response.Message === 'success') {\n                  this.toastr.success(response.MessageDescription);\n                  this.service.forgetpassword.OldPassword = '';\n                  this.service.forgetpassword.NewPassword = '';\n                  this.service.forgetpassword.ConfirmPassword = '';\n                  setTimeout(() => {\n                    window.history.back();\n                  }, 2000);\n                  }\n                if (response.Message === 'failure') {\n                  this.toastr.warning(response.MessageDescription);\n                }\n      }}, error =>  console.log(error));\n  }\n  onStrengthChanged(strength: number) {\n   // console.log('password strength = ', strength);\n  }\n  onPasswordStrengShow() {\n    if (this.showDetails) {\n      this.showDetails = false;\n    } else {\n      this.showDetails = true;\n    }\n  }\n}\n","<div class=\"kt-portlet \">\n    <form class=\"kt-form kt-form--label-right\">\n        <div class=\"kt-portlet__body\">\n            <div class=\"kt-section kt-section--first\">\n                <div class=\"kt-section__body\">\n                    <div style=\"display: none;\" class=\"alert alert-solid-danger alert-bold fade show kt-margin-t-20 kt-margin-b-40\"\n                        role=\"alert\">\n                        <div class=\"alert-icon\"><i class=\"fa fa-exclamation-triangle\"></i>\n                        </div>\n                        <div class=\"alert-text\">Configure user passwords to expire\n                            periodically. Users will need warning that their passwords are\n                            going to expire, <br>or they might inadvertently get locked out\n                            of the system!</div>\n                        <div class=\"alert-close\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"alert\"\n                                aria-label=\"Close\">\n                                <span aria-hidden=\"true\"><i class=\"la la-close\"></i></span>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <label class=\"col-xl-3\"></label>\n                        <div class=\"col-lg-9 col-xl-6\">\n                            <h3 class=\"kt-section__title kt-section__title-sm\">Change Your Password:</h3>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-xl-3 col-lg-3 col-form-label\">\n                            </label>\n                        <div class=\"col-lg-9 col-xl-6\">\n                            <input type=\"password\" class=\"form-control\" name=\"OldPassword\"\n                                #OldPassword=\"ngModel\"\n                                [(ngModel)]=\"service.forgetpassword.OldPassword\"\n                                placeholder=\"Current password\">\n                        </div>\n                    </div>\n                   \n                    <div class=\"form-group row\">\n                        <label class=\"col-xl-3 col-lg-3 col-form-label\">\n                            </label>\n                        <div class=\"col-lg-9 col-xl-6\">\n                           \n                                <mat-card>\n                                    <mat-card-subtitle>\n                                      <mat-slide-toggle [(ngModel)]=\"showDetails3\"\n                                                        [ngModelOptions]=\"{standalone: true}\">\n                                        Show Password Details\n                                      </mat-slide-toggle>\n                                    </mat-card-subtitle>          \n                                    <mat-card-content>\n                  \n                                      <!--password input filed-->\n                                      <mat-form-field appearance=\"outline\" [color]=\"passwordComponentWithConfirmation.color\" style=\"width: 100%\">\n                                        <mat-label>New Password</mat-label>\n                                        <mat-pass-toggle-visibility #toggle3 matSuffix>\n                                          <i class=\"fa fa-list\"></i>\n                                        </mat-pass-toggle-visibility>\n                                        <input matInput #passwordWithConfirmation [(ngModel)]=\"service.forgetpassword.NewPassword\"  \n                                               [type]=\"toggle3.type\"\n                                               [formControl]=\"passwordComponentWithConfirmation.passwordFormControl\"\n                                               placeholder=\"Password\"\n                                               required>\n                                        <!--password hint-->\n                                        <mat-hint align=\"end\" aria-live=\"polite\">\n                                          {{passwordWithConfirmation.value.length}} / {{passwordComponentWithConfirmation.max}}\n                                        </mat-hint>\n                                        <mat-error *ngIf=\"passwordComponentWithConfirmation.passwordFormControl.hasError('required')\">\n                                          Password is required\n                                        </mat-error>\n                                        <mat-error *ngIf=\"passwordComponentWithConfirmation.passwordFormControl.hasError('pattern')\">\n                                          Password is not valid\n                                        </mat-error>\n                                      </mat-form-field>\n                                      <!--@angular-material-extensions/password-strength's main component-->\n                                      <mat-password-strength #passwordComponentWithConfirmation\n                                                             (onStrengthChanged)=\"onStrengthChanged($event)\"\n                                                             [password]=\"passwordWithConfirmation.value\">\n                                      </mat-password-strength>\n                                      <!--Password's strength info-->\n                                      <mat-password-strength-info\n                                        *ngIf=\"showDetails3\"\n                                        [passwordComponent]=\"passwordComponentWithConfirmation\">\n                                      </mat-password-strength-info>\n                                      <!--password input field for confirmation-->\n                                      <mat-form-field appearance=\"outline\" class=\"mt-3\" style=\"width: 100%\">\n                                        <mat-label>Confirm Password</mat-label>\n                                        <mat-pass-toggle-visibility #toggleConfirmPassword matSuffix></mat-pass-toggle-visibility>\n                                        <input matInput #passwordToConfirm [(ngModel)]=\"service.forgetpassword.ConfirmPassword\"  \n                                               [type]=\"toggleConfirmPassword.type\"\n                                               [formControl]=\"passwordComponentWithConfirmation.passwordConfirmationFormControl\"\n                                               placeholder=\"Password\">\n                                        <!-- password hint-->\n                                        <mat-hint align=\"end\" aria-live=\"polite\">\n                                          {{passwordToConfirm.value.length}} / {{passwordComponentWithConfirmation.max}}\n                                        </mat-hint>\n                                        <!-- password error msgs-->\n                                        <mat-error *ngIf=\"passwordComponentWithConfirmation.passwordConfirmationFormControl.hasError('required')\">\n                                          Password confirmation is required\n                                        </mat-error>\n                                        <mat-error\n                                          *ngIf=\"passwordComponentWithConfirmation.passwordConfirmationFormControl.hasError('notConfirmed')\">\n                                          Password is not the same\n                                        </mat-error>\n                                      </mat-form-field>\n                                    </mat-card-content>\n                                    <mat-card-content>\n                                    </mat-card-content>\n                                  </mat-card>                                                 \n                            \n                        </div>\n                </div>\n                    <!-- <div class=\"form-group form-group-last row\">\n                        <label class=\"col-xl-3 col-lg-3 col-form-label\">Verify\n                            Password</label>\n                        <div class=\"col-lg-9 col-xl-6\">\n                            <input type=\"password\" class=\"form-control\"\n                                name=\"ConfirmPassword\" #ConfirmPassword=\"ngModel\"\n                                [(ngModel)]=\"service.forgetpassword.ConfirmPassword\"\n                                placeholder=\"Verify password\">\n                        </div>\n                    </div> -->\n                </div>\n            </div>\n        </div>\n        <div class=\"kt-portlet__foot\">\n            <div class=\"kt-form__actions\">\n                <div class=\"row\">\n                    <div class=\"col-lg-3 col-xl-3\">\n                    </div>\n                    <div class=\"col-lg-9 col-xl-9\">\n                        <button type=\"button\" class=\"btn btn-brand btn-bold\"\n                        \n                            (click)=\"onsubmitPasswordchange()\">Change\n                            Password</button>&nbsp;\n                        <button class=\"btn btn-secondary\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n","import { __decorate, __metadata } from 'tslib';\nimport { EventEmitter, Renderer2, ViewChild, ElementRef, Input, Output, Component, forwardRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\n\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"selectControll\"];\nconst _c1 = [[[\"option\"], [\"optgroup\"]]];\nconst _c2 = [\"option, optgroup\"];\nvar LSelect2Component_1;\r\nlet LSelect2Component = LSelect2Component_1 = class LSelect2Component {\r\n    constructor(_renderer) {\r\n        this._renderer = _renderer;\r\n        this.options = {};\r\n        this.required = false;\r\n        this.maxCount = Number.MAX_SAFE_INTEGER;\r\n        this.minCount = Number.MIN_SAFE_INTEGER;\r\n        this.valueChange = new EventEmitter();\r\n        this._onChange = (_) => { };\r\n        this._onTouched = () => { };\r\n    }\r\n    ngOnInit() { }\r\n    ngAfterViewInit() {\r\n        this._jqueryElement = $(this.selectControll.nativeElement);\r\n        this.initSelect2();\r\n        this._jqueryElement.on('select2:select select2:unselect', (e) => {\r\n            let data = this._jqueryElement.select2('data');\r\n            for (let item of data) {\r\n                delete item.element;\r\n                delete item.disabled;\r\n                delete item.selected;\r\n            }\r\n            if (!this.options.multiple) {\r\n                data = (e.type == 'select2:unselect') ? null : data[0];\r\n            }\r\n            this.selectedValue = data;\r\n            this._onChange(data);\r\n            this.valueChange.emit(data);\r\n        });\r\n        if (this.selectedValue) {\r\n            this.setSelect2Value(this.selectedValue);\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this._jqueryElement)\r\n            return;\r\n        if (this.hasChanged(changes)) {\r\n            this.initSelect2();\r\n            if (this.selectedValue) {\r\n                this.setSelect2Value(this.selectedValue);\r\n            }\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._jqueryElement.select2('destroy');\r\n    }\r\n    writeValue(value) {\r\n        this.selectedValue = value;\r\n        if (value !== null && value !== undefined)\r\n            this.setSelect2Value(value);\r\n    }\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    validate(c) {\r\n        if (this.disabled) {\r\n            return null;\r\n        }\r\n        let length = this.selectedValue ? this.selectedValue.length : 0;\r\n        if (this.required === true && length === 0) {\r\n            return { required: true };\r\n        }\r\n        if (this.minCount > 0 && length < this.minCount) {\r\n            return { minCount: true };\r\n        }\r\n        if (this.maxCount > 0 && length > this.maxCount) {\r\n            return { maxCount: true };\r\n        }\r\n        return null;\r\n    }\r\n    initSelect2() {\r\n        if (this._jqueryElement.hasClass('select2-hidden-accessible') == true) {\r\n            this._jqueryElement.select2('destroy');\r\n            this._renderer.setProperty(this.selectControll.nativeElement, 'innerHTML', '');\r\n        }\r\n        let options = {\r\n            data: this.data\r\n        };\r\n        Object.assign(options, this.options);\r\n        this._jqueryElement.select2(options);\r\n    }\r\n    setSelect2Value(value) {\r\n        if (!this._jqueryElement || !value) {\r\n            this.selectedValue = value;\r\n            return;\r\n        }\r\n        ;\r\n        let targetVal = value['id'] || value;\r\n        if (Array.isArray(value)) {\r\n            targetVal = value.map(x => x['id']);\r\n        }\r\n        this._jqueryElement.val(targetVal).trigger('change');\r\n    }\r\n    hasChanged(changes) {\r\n        if (changes['data'] && JSON.stringify(changes['data'].previousValue) !== JSON.stringify(changes['data'].currentValue)) {\r\n            return true;\r\n        }\r\n        if (changes['options'] && JSON.stringify(changes['options'].previousValue) !== JSON.stringify(changes['options'].currentValue)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n};\nLSelect2Component.ɵfac = function LSelect2Component_Factory(t) { return new (t || LSelect2Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nLSelect2Component.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LSelect2Component, selectors: [[\"l-select2\"]], viewQuery: function LSelect2Component_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selectControll = _t.first);\n    } }, inputs: { options: \"options\", required: \"required\", maxCount: \"maxCount\", minCount: \"minCount\", disabled: \"disabled\", data: \"data\" }, outputs: { valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => LSelect2Component_1),\n                multi: true\n            },\n            {\n                provide: NG_VALIDATORS,\n                useExisting: forwardRef(() => LSelect2Component_1),\n                multi: true\n            }\n        ]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 3, vars: 1, consts: [[2, \"width\", \"100%\", 3, \"disabled\"], [\"selectControll\", \"\"]], template: function LSelect2Component_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵelementStart(0, \"select\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled);\n    } }, encapsulation: 2 });\r\nLSelect2Component.ctorParameters = () => [\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    ViewChild('selectControll'),\r\n    __metadata(\"design:type\", ElementRef)\r\n], LSelect2Component.prototype, \"selectControll\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array)\r\n], LSelect2Component.prototype, \"data\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], LSelect2Component.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], LSelect2Component.prototype, \"options\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], LSelect2Component.prototype, \"required\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], LSelect2Component.prototype, \"maxCount\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], LSelect2Component.prototype, \"minCount\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], LSelect2Component.prototype, \"valueChange\", void 0);\r\nLSelect2Component = LSelect2Component_1 = __decorate([ __metadata(\"design:paramtypes\", [Renderer2])\r\n], LSelect2Component);\n\nlet LSelect2Module = class LSelect2Module {\r\n};\nLSelect2Module.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LSelect2Module });\nLSelect2Module.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LSelect2Module_Factory(t) { return new (t || LSelect2Module)(); }, imports: [[\n            CommonModule,\n            FormsModule\n        ]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LSelect2Component, [{\n        type: Component,\n        args: [{\n                selector: 'l-select2',\n                template: \"<select #selectControll [disabled]=\\\"disabled\\\" style=\\\"width: 100%\\\">\\r\\n  <ng-content select=\\\"option, optgroup\\\">\\r\\n  </ng-content>\\r\\n</select>\",\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => LSelect2Component_1),\n                        multi: true\n                    },\n                    {\n                        provide: NG_VALIDATORS,\n                        useExisting: forwardRef(() => LSelect2Component_1),\n                        multi: true\n                    }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, { options: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], maxCount: [{\n            type: Input\n        }], minCount: [{\n            type: Input\n        }], valueChange: [{\n            type: Output\n        }], disabled: [{\n            type: Input\n        }], selectControll: [{\n            type: ViewChild,\n            args: ['selectControll']\n        }], data: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LSelect2Module, { declarations: function () { return [LSelect2Component]; }, imports: function () { return [CommonModule,\n        FormsModule]; }, exports: function () { return [LSelect2Component]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LSelect2Module, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule\n                ],\n                declarations: [\n                    LSelect2Component\n                ],\n                exports: [\n                    LSelect2Component\n                ]\n            }]\n    }], null, null); })();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { LSelect2Component, LSelect2Module };\n\n//# sourceMappingURL=ngx-select2.js.map"],"sourceRoot":"webpack:///"}